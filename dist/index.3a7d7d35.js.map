{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    //   this.date=...\n    //   this.id=...\n    this.coords = coords; //[lat,lng]\n    this.distance = distance; //in km\n    this.duration = duration; // in min\n  }\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDay()}`;\n  }\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n  calcPace() {\n    //min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.cadence = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n  calcSpeed() {\n    //speed km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n////////////////////////////////////////////\n//APPLICATION ARCHITECTURE\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    //get users position\n    this._getPosition();\n\n    //get date from local storage\n    this._getLocalStorage();\n    //Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n\n    const coords = [latitude, longitude];\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    //Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n  _hideForm() {\n    //Empty inputs\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n    form.getElementsByClassName.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    e.preventDefault();\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    //Get date from form\n\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n    //If workout running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      //Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    //if workout cycling create cycsling object\n    if (type === 'cycling') {\n      //Check if data is valid\n\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n    //add new object to the workout array\n    this.#workouts.push(workout);\n\n    //Render workout on map as marker\n\n    this._renderWorkoutMarker(workout);\n\n    //Render workout on list\n    this._renderWorkout(workout);\n    //Hide form + Clear input fields\n    this._hideForm();\n\n    //Set local storge to all workouts\n    this._setLocalStorage();\n  }\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\n      )\n      .openPopup();\n  }\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n          <h2 class=\"workout__title\">${workout.description}</h2>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">${\n              workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n            }</span>\n            <span class=\"workout__value\">${workout.distance}</span>\n            <span class=\"workout__unit\">km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚è±</span>\n            <span class=\"workout__value\">${workout.duration}</span>\n            <span class=\"workout__unit\">min</span>\n          </div>`;\n\n    if (workout.type === 'running')\n      html += ` \n        <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n            <span class=\"workout__unit\">min/km</span>\n         </div>\n         <div class=\"workout__details\">\n            <span class=\"workout__icon\">ü¶∂üèº</span>\n            <span class=\"workout__value\">${workout.cadence}</span>\n            <span class=\"workout__unit\">spm</span>\n        </div>\n    </li>`;\n    if (workout.type === 'cycling')\n      html += `<div class=\"workout__details\">\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n            <span class=\"workout__unit\">km/h</span>\n         </div>\n        <div class=\"workout__details\">\n            <span class=\"workout__icon\">‚õ∞</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n         </div>\n    </li>`;\n    form.insertAdjacentHTML('afterend', html);\n  }\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    //using the public interface\n    // workout.click();\n  }\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\nconst app = new App();\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDay","click","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapZoomLevel","mapEvent","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","getElementsByClassName","display","add","setTimeout","style","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","preventDefault","allPositive","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.3a7d7d35.js.map"}